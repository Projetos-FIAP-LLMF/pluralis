name: Continuous Delivery (Docker Hub → Azure Web App)

on:
  push:
    branches: [ develop, master ]

env:
  IMAGE_NAME: pluralis-app
  REGISTRY: docker.io

concurrency:
  group: cd-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    name: 1) Tests (Gradle Java 17)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Permissão gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew clean test --no-daemon

  build_push:
    name: 2) Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_repo: ${{ steps.meta.outputs.IMAGE }}
      sha_tag: ${{ steps.meta.outputs.SHA_TAG }}
      env_tag: ${{ steps.meta.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Permissão gradlew
        run: chmod +x gradlew

      - name: Build jar (sem testes)
        run: ./gradlew bootJar -x test --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          if [ "${GITHUB_REF_NAME}" = "master" ]; then
            echo "TAG=prod" >> $GITHUB_OUTPUT
          else
            echo "TAG=staging" >> $GITHUB_OUTPUT
          fi
          echo "SHA_TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "IMAGE=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Build & Push (env tag + SHA)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG }}
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.SHA_TAG }}

  deploy_staging:
    name: 3) Deploy to Azure (staging / QA)
    needs: build_push
    if: github.ref_name == 'develop'
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Set image name (staging)
        id: img
        run: echo "FULL=${{ needs.build_push.outputs.image_repo }}:staging" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Web App (staging)
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_STG }}
          slot-name: 'staging'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_STG }}
          images: ${{ steps.img.outputs.FULL }}

      - name: Output URL
        run: echo "Staging deployed with image ${{ steps.img.outputs.FULL }}"

  deploy_prod:
    name: 4) Deploy to Azure (production)
    needs: build_push
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Set image name (prod)
        id: img
        run: echo "FULL=${{ needs.build_push.outputs.image_repo }}:prod" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Web App (prod)
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PROD }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_PROD }}
          images: ${{ steps.img.outputs.FULL }}

      - name: Output URL
        run: echo "Prod deployed with image ${{ steps.img.outputs.FULL }}"
